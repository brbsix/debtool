#!/bin/bash
#
# bash completions for debtool


# ensure bash-completion is installed
[[ $(dpkg-query --show --showformat="\${Status}" 'bash-completion' 2>/dev/null) != 'install ok installed' ]] && return 0

# ensure debtool is on the PATH
_have debtool && {

__debtool(){
    local cmd cur lopts opts params shopts

    COMPREPLY=()
    cur=${COMP_WORDS[COMP_CWORD]}

    if [[ $cur = -* || ( -z $cur && $COMP_CWORD -eq 1 ) ]]; then
        # add completion for all of debtool's command line options
        readarray -t COMPREPLY < \
            <( compgen -W '-a --auto -b --build -c --combo -d --download
                           -f --fast --format -h --help -i --interactive
                           -m --md5sums -q --quiet -r --reinst --repack
                           -s --show -u --unpack -z' -- "$cur" )
        return 0
    fi

    # parse options (necessary to break up options like -brq)
    shopts='a,b,c,d,f,h,i,m,q,r,s,u,z'
    lopts='auto,build,combo,download,fast,format,help,interactive,md5sums,quiet,reinst,repack,show,unpack'
    params=$(getopt -o "$shopts" -l "$lopts" -- "${COMP_WORDS[@]::${#COMP_WORDS[@]}-1}" 2>/dev/null)
    eval "opts=($params)"

    cmd=$(__debtool_getcmd)

    if [[ -n $cmd ]]; then
        case $cmd in
            build)

                # configure pathname completion
                compopt -o filenames &>/dev/null

                # include directories (except hidden ones)
                readarray -t COMPREPLY < \
                    <( compgen -d -X '?(*/).*' -- "$cur" )

                return 0
                ;;

            download)

                # include packages in apt-cache
                readarray -t COMPREPLY < \
                    <( apt-cache --no-generate pkgnames -- "$cur" 2>/dev/null )

                return 0
                ;;

            reinst)

                # configure pathname completion
                compopt -o filenames &>/dev/null

                # include directories and debian archives
                readarray -t COMPREPLY < <( __debtool_lsdebs "$cur" )

                return 0
                ;;

            repack)

                # include installed packages
                readarray -t COMPREPLY < \
                    <( _xfunc dpkg _comp_dpkg_installed_packages "$cur" 2>/dev/null )

                return 0
                ;;

            unpack)

                # configure pathname completion
                compopt -o filenames &>/dev/null

                # include directories, debian archives, and installed packages
                readarray -t COMPREPLY < \
                    <( __debtool_lsdebs "$cur"
                       _xfunc dpkg _comp_dpkg_installed_packages "$cur" 2>/dev/null )

                return 0
                ;;
        esac
    fi

    return 0
}

__debtool_contains(){
    local arg opt

    for arg in "$@"; do
        for opt in "${opts[@]}"; do
            if [[ $arg = "$opt" ]]; then
                return 0
            fi
        done
    done

    return 1
}

__debtool_getcmd(){
    if __debtool_contains '-b' '--build' '--fast' '-z'; then
        echo 'build'
    elif __debtool_contains '-c' '--combo' '-d' '--download' '-i' '--interactive' '-s' '--show'; then
        echo 'download'
    elif __debtool_contains '-r' '--reinst'; then
        echo 'reinst'
    elif __debtool_contains '--repack'; then
        echo 'repack'
    elif __debtool_contains '-u' '--unpack'; then
        echo 'unpack'
    fi
}

__debtool_lsdebs(){
    # include directories (except hidden ones)
    compgen -d -X '?(*/).*' -- "$1"

    # include files ending with .deb, .DEB, .udeb, .UDEB
    compgen -f -X '!*.@(deb|DEB|udeb|UDEB)' -- "$1"
}

complete -F __debtool debtool

}
