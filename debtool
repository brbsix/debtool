#!/bin/bash
#
# Simple tool to facilitate downloading and repacking Debian archives


cat <<'__END__' >/dev/null
#!/usr/bin/perl
#
# dpkg-repack puts humpty-dumpty back together again.
#
# Copyright © 1996-2006 Joey Hess <joeyh@debian.org>
# Copyright © 2012,2014-2015 Guillem Jover <guillem@debian.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

use strict;
use warnings;

use File::stat;
use Getopt::Long;

my $VERSION = '1.41';

my $error_flag;
my $dirty_flag;
my $build_dir;
my $rootdir;
my $arch;
my $generate;
my @deb_options;

sub Syntax {
	print { *STDERR } <<USAGE;
Usage: dpkg-repack [option...] packagename...

Options:
      --root=<dir>      Take package from filesystem rooted on <dir>.
      --arch=<arch>     Force the package to be built for architecture <arch>.
      --generate        Generate build directory but do not build deb.
  -d, --deb-option=<option>
                        Pass build <option> to dpkg-deb.
  -?, --help            Show this usage information.
      --version         Show the version.

<packagename> is the name of the package(s) to attempt to repack.
USAGE
}

sub Version {
	print 'dpkg-repack ' . $VERSION . "\n";
}

sub Info {
	print "dpkg-repack: @_\n";
}

sub Warn {
	print { *STDERR } "dpkg-repack: @_\n";
}

sub Error {
	Warn @_;
	$error_flag = 1;
}

sub Die {
	Error('Fatal Error:', @_);
	CleanUp();
	exit 1;
}

# Run a system command, and print an error message if it fails.
sub SafeSystem {
	my $errormessage = pop @_;

	my $ret = system @_;
	if (int($ret / 256) > 0) {
		$errormessage = 'Error running: ' . join ' ', @_
			if !$errormessage;
		Error($errormessage);
	}
}

# Make the passed directory, print an error message if it fails.
sub SafeMkdir {
	my ($dir, $perms) = @_;

	mkdir $dir, $perms or Error("Unable to make directory, \"$dir\": $!");
	# mkdir doesn't do sticky bits and suidness.
	chmod $perms, $dir or Error("Unable to change permissions on \"$dir\": $!");
}

# This removes the temporary directory where we built the package.
sub CleanUp {
	if ($dirty_flag) {
		SafeSystem('rm', '-rf', $build_dir,
		           "Unable to remove $build_dir ($!). Please remove it by hand.");
	}
	$dirty_flag = 0;
}

# This makes the directories we will rebuild the package in.
sub Make_Dirs {
	$dirty_flag = 1;

	SafeMkdir $build_dir, 0755;
	SafeMkdir "$build_dir/DEBIAN", 0755;
}

# Get package control file via dpkg -s.
sub Extract_Control {
	my $packagename = shift;

	my @control = qx{dpkg --root=$rootdir/ -s $packagename};
	chomp foreach @control;

	if ($arch) {
		@control = grep { !/^Architecture:/ } @control;
		push @control, "Architecture: $arch\n";
	}

	if (! grep { /^Status:\s+.*\s+installed/ } @control) {
		Die "Package $packagename not fully installed";
	}
	@control = grep { !/^Status:\s+/ } @control;

	return @control;
}

# Install the control file. Pass it the text of the file.
sub Install_Control {
	my ($packagename, @control) = @_;

	open my $control_fh, '>', "$build_dir/DEBIAN/control"
		or Die "Can't write to $build_dir/DEBIAN/control";

	my $skip = 0;
	foreach (@control) {
		# Remove the Conffiles stanza
		if (/^(\S+):/) {
			$skip = lc $1 eq 'conffiles';
		}
		print { $control_fh } "$_\n" unless $skip;
	}

	close $control_fh;
	SafeSystem 'chown', '0:0', "$build_dir/DEBIAN/control", '';
}

# Install all the files in the DEBIAN directory. (Except control file and
# file list file.)
sub Install_DEBIAN {
	my ($packagename, @conffiles) = @_;

	my @control_files;
	open my $q_fh, '-|', "dpkg-query --admindir=$rootdir/var/lib/dpkg --control-path $packagename 2>/dev/null"
		or Die "dpkg-query failed: $!";
	while (my $fn = <$q_fh>) {
		chomp $fn;
		push @control_files, $fn;
	}
	close $q_fh;

	foreach my $fn (@control_files) {
		my ($basename) = $fn =~ m/^.*\.(.*?)$/;
		SafeSystem 'cp', '-p', $fn, "$build_dir/DEBIAN/$basename", '';
	}

	# Conffiles have to be handled specially, because
	# dpkg-query --control-path does not list the conffiles file.
	# Also, we need to generate one that only contains conffiles
	# that are still present on the filesystem.
	if (@conffiles) {
		open my $out_fh, '>', "$build_dir/DEBIAN/conffiles"
			or Die "write conffiles: $!";
		foreach (@conffiles) {
			print { $out_fh } "$_\n";
		}
		close $out_fh;
		SafeSystem 'chown', '0:0', "$build_dir/DEBIAN/conffiles", '';
	}
}

# This looks at the list of files in this package, and places them
# all on the directory tree.
sub Install_Files {
	my ($packagename, @control) = @_;

	# There are two types of conffiles. Obsolete conffiles should be
	# skipped, while other conffiles should be included if present.
	my @conffiles = ();
	my @obsolete_conffiles;
	my $in_conffiles = 0;
	foreach my $line (@control) {
		if ($line =~ /^Conffiles:/) {
			$in_conffiles = 1;
		}
		elsif ($in_conffiles && $line =~ /^ (.*)\s+([^\s]+)\s+obsolete$/) {
			push @obsolete_conffiles, $1;
		}
		elsif ($in_conffiles && $line =~ /^ (.*)\s+([^\s]+)$/) {
			push @conffiles, $1;
		}
		else {
			$in_conffiles = 0;
		}
	}

	# I need a list of all the files, for later lookups
	# when I test to see where symlinks point to.
	# Note that because I parse the output of the command (for
	# diversions, below) it's important to make sure it runs with English
	# language output.
	my $lc_all = $ENV{LC_ALL};
	$ENV{LC_ALL} = 'C';
	my @filelist = split /\n/, qx{dpkg --root=$rootdir/ -L $packagename};
	$ENV{LC_ALL} = $lc_all if defined $lc_all; # important to reset it.

	# Set up a hash for easy lookups.
	my %filelist = map { $_ => 1 } @filelist;

	my $fn;
	for (my $x = 0; $x <= $#filelist; $x++) {
		my $origfn = $filelist[$x];

		# dpkg -L spits out extra lines to report diversions.
		# we have to parse those (ugly..), to find out where the
		# file was diverted to, and use the diverted file.
		if (defined $filelist[$x + 1] &&
		    ($filelist[$x + 1] =~ m/locally diverted to: (.*)/ ||
		     $filelist[$x + 1] =~ m/diverted by .*? to: (.*)/)) {
			$fn = "$rootdir/$1";
			$x++; # skip over that line.
		}
		elsif ($origfn =~ m/package diverts others to: (.*)/) {
			# not a file at all, skip over it
			next;
		}
		else {
			$fn = $rootdir . $origfn;
		}

		if (grep { $_ eq $fn } @obsolete_conffiles) {
			Warn "Skipping obsolete conffile $fn";
			next;
		}

		if (!-e $fn && !-l $fn) {
			Error "File not found: $fn" unless grep { $_ eq $fn } @conffiles;
		}
		elsif ((-d $fn and not -l $fn) or
		       (-d $fn and -l $fn and not $filelist{readlink($fn)}
		        and ($x + 1 <= $#filelist and $filelist[$x + 1] =~ m/^\Q$origfn\E\//))) {
			# See the changelog for version 0.17 for an
			# explanation of what I'm doing above with
			# directory symlinks. I rely on the order of the
			# filelist listing parent directories first, and
			# then their contents.
			# There has to be a better way to do this!
			my $f = '';
			foreach my $dir (split(m/\/+/, $origfn)) {
				$f .= "/$dir";
				next if -d $build_dir . $f;
				my $st = stat($rootdir . $f);
				SafeMkdir "$build_dir/$f", $st->mode;
				chown($st->uid, $st->gid, "$build_dir/$f");
			}
		}
		elsif (-p $fn) {
			# Copy a named pipe with cp -a.
			SafeSystem 'cp', '-a', $fn, "$build_dir/$origfn", '';
		}
		else {
			SafeSystem 'cp', '-pd', $fn, "$build_dir/$origfn", '';
		}
	}

	return @conffiles;
}

# Parse parameters.
$rootdir = '';
my $ret = GetOptions(
	'root|r=s', \$rootdir,
	'arch|a=s', \$arch,
	'generate|g' , \$generate,
	'deb-option|d=s@', \@deb_options,
	'help|?', sub { Syntax(); exit 0; },
	'version', sub { Version(); exit 0; },
);

if (not @ARGV or not $ret) {
	Syntax();
	exit 1;
}

# Some sanity checks.
if ($> != 0) {
	Die 'This program should be run as root (or you could use fakeroot -u). Aborting.';
}
if (exists $ENV{FAKED_MODE} && $ENV{FAKED_MODE} ne 'unknown-is-real') {
	Warn 'fakeroot run without its -u flag may corrupt some file permissions.';
}

foreach my $packagename (@ARGV) {
	my $random = int(1000 + rand(9999 - 1000));
	$build_dir = "./$packagename-$random";

	my @control = Extract_Control($packagename);
	if (!@control) {
		Die "Unable to locate $packagename in the package list.";
	}

	# If the umask is set wrong, the directories will end up with the wrong
	# perms. (Is this still needed?)
	umask 022;

	# Generate the directory tree.
	Make_Dirs();
	my @conffiles = Install_Files($packagename, @control);
	Install_DEBIAN($packagename, @conffiles);
	Install_Control($packagename, @control);

	# Stop here?
	if ($generate) {
		Info "created $build_dir for $packagename";
		next;
	}

	# Let dpkg-deb do its magic.
	SafeSystem('dpkg-deb', @deb_options, '--build', $build_dir, '.', '');

	# Finish up.
	CleanUp();
	if ($error_flag) {
		Error('Problems were encountered in processing.');
		Error('The package may be broken.');
		$error_flag = 0;
	}
}
__END__


# create a Debian archive from a directory
build(){
    (
        # NOTE: child functions inherit the parent's environment
        #       (to include local variables)

        unset ARCHIVE BACKUPDIR BACKUPFILE

        if [[ ! -d $1 ]]; then
            error "'$1' is not a directory"
            return 1
        fi

        prep_build "$1"

        if [[ -n $2 ]]; then
            ARCHIVE=$2
        else

            # identify control file
            control=$1/DEBIAN/control

            # verify control file (regular file, readable, nonzero size)
            if [[ ! -f $control || ! -r $control || ! -s $control ]]; then
                error "Missing or invalid control file '$control'"
                return 1
            fi

            # determine archive name from contents of control file
            ARCHIVE=$(awk '/^Package: / { p=$2 }; /^Version: / { v=$2 }; /^Architecture: / { a=$2 }; END{ if ( length(p) == 0 || length(v) == 0 ) exit; if ( length(a) > 0 ) { printf "%s_%s_%s.deb", p, v, a } else { printf "%s_%s.deb", p, v } }' "$control" 2>/dev/null)

            # verify control file was parsed
            if [[ -z $ARCHIVE ]]; then
                error "Unparsable control file '$control'"
                return 1
            fi
        fi

        check_build_destination "$1" "$ARCHIVE"

        # build the archive
        fakeroot dpkg-deb --build "$1" "$ARCHIVE"

        ec=$?

        # check if build failed
        if (( ec != 0 )); then
            error "dpkg-deb returned a nonzero exit code [$ec]"
            restore_backup
            return 1
        fi

        # check if archive was created and handle backup
        if [[ -f $ARCHIVE ]]; then
            remove_backup
        else
            restore_backup
            return 1
        fi

        if (( REINSTALL == 1 )); then
            reinst "$ARCHIVE"
        fi
    )
}


# ensure build destination does not already exist
check_build_destination(){
    if [[ -e $2 && -f $2 ]]; then
        if (( AUTO != 1 )); then

            # prompt to overwrite pre-existing file
            read -p "Overwrite pre-existing file '$2' (y|N)? " -r
            if [[ ${REPLY,} != y* ]]; then
                exit 1
            fi

        else
            warning "Overwriting pre-existing file '$2'"
        fi

        create_backup "$@"

    elif [[ -e $2 ]]; then
        error "Unable to build '$1' (destination '$2' already exists but is not a file)"
        exit 1
    fi
}


# check dependencies for prescribed function
check_dependency(){
    (
        # store dependencies for each function
        declare -A dlist
        dlist['build']='awk dpkg fakeroot find grep gzip xargs'
        dlist['combo']='apt awk dpkg'  # show + unpack
        dlist['download']='apt awk'
        dlist['fast']=${dlist['build']}
        dlist['interactive']='apt awk'  # download + show
        dlist['reinst']='dpkg'
        dlist['repack']='fakeroot perl'
        dlist['show']='apt awk'
        dlist['unpack']='awk dpkg'
        dlist['unpack_installation']=${dlist['repack']}

        # get the dependencies for function $1
        dependencies=(${dlist["$1"]})

        missing=()
        for program in "${dependencies[@]}"; do
            hash "$program" &>/dev/null || missing+=("$program")
        done

        if (( ${#missing[@]} > 0 )); then
            error "Please install the following program(s) before continuing: ${missing[*]}"
            return 1
        fi
    ) || exit 1
}


# check whether download exists
check_download_exists(){
    if [[ ! -f $DESTINATION ]]; then
        DESTINATION=$(find -type f -name "$(sed 's/_/_*/' <<<"$DESTINATION")" | head -n1)
        if [[ ! -f $DESTINATION ]]; then
            return 1
        fi
    fi

    return 0
}


# check for Internet connectivity
check_internet(){
    (
        urls=(4.2.2.2 8.8.8.8 debian.org ubuntu.com)

        for url in "${urls[@]}"; do
            ping -c1 -W1 "$url" &>/dev/null && return 0
        done

        warning 'No Internet connectivity'

        return 1
    )
}


# ensure unpack destination does not already exist
check_unpack_destination(){
    if [[ -e $2 ]]; then
        error "Unable to unpack '$1' (destination folder '$2' already exists)"
        exit 1
    fi
}


# download package(s) via apt-get then unpack
combo(){

    local package

    for package in "$@"; do
        (
            unset DESTINATION FULLPACKAGE

            # set $DESTINATION and $FULLPACKAGE
            if (( INTERACTIVE == 1 )); then
                querypackage "$package"
            else
                findpackage "$package"
            fi

            # confirm apt-get was able to determing package destination filename
            if [[ -z $DESTINATION || -z $FULLPACKAGE ]]; then
                error "Failed to identify '$package' for download"
                return 1
            fi

            # store output from apt-get to determine if a download occurred

            # NOTE: We are using apt-get to download even if $DESTINATION file
            #       already exists because apt-get is intelligent and will only
            #       re-download if neccesary (i.e. file checksum mismatch).

            output=$(apt-get --quiet download "$FULLPACKAGE" 2>/dev/null)

            # confirm apt-get exited successfully
            if (( $? != 0 )); then
                error "apt-get experienced an error downloading '$package'"
                check_internet || return 100
                return 1
            # confirm download exists
            elif ! check_download_exists; then
                error "Failed to download '$package'"
                return 1
            fi

            if [[ -z $output ]]; then
                info "Archive '$DESTINATION' appears to have already existed"
            fi

            # unpack downloaded archive
            unpack "$DESTINATION"
        )

        # exit if there was a connectivity error
        if (( $? == 100 )); then
            exit 1
        fi

    done
}


# test whether args are equivalent to CMDS
commands(){
    [[ $(printf '%s\n' "${CMDS[@]}" | LC_ALL=C sort) = $(printf '%s\n' "$@" | LC_ALL=C sort) ]]
}


# backup a pre-existing archive (into a temp dir)
create_backup(){

    # create a temporary directory
    BACKUPDIR=$(mktemp --directory 2>/dev/null)
    if [[ ! -d $BACKUPDIR ]]; then
        error 'Experienced unknown error while creating temporary directory'
        echo 'Please remove the pre-existing file and try again' >&2
        exit 1
    fi

    # backup pre-existing file
    mv "$2" "$BACKUPDIR"

    if [[ -f $BACKUPDIR/${2##*/} ]]; then
        BACKUPFILE=$BACKUPDIR/${2##*/}
        info "Storing backup of '$2' at '$BACKUPFILE'"
    else
        warning "Failed to backup '$2'"
    fi

}


# download package(s) via apt-get
download(){
    (
        for package in "$@"; do

            # download best package version available
            while IFS= read -r string; do
                if apt-get download "$string" &>/dev/null; then
                    successes+=("$package")
                    continue 2
                fi
            done < <("$0" --show --format "$package" 2>/dev/null | awk '{print $NF}')

            # this point is only reachable upon failure
            failures+=("$package")

        done

        if (( ${#successes[@]} > 0 )); then
            info "Successfully downloaded: ${successes[*]}"
        fi

        if (( ${#failures[@]} > 0 )); then
            error "Failed to download: ${failures[*]}"
            check_internet
            return 1
        fi
    )
}


# use bundled version of dpkg-repack
dpkg-repack(){
    fakeroot -u perl -x "$0" "$@"
}


# enable auto option
enable_auto(){
    AUTO=1
}


# enable format option
enable_format(){
    FORMAT=1
}


# enable interactive download option
enable_interactive(){
    INTERACTIVE=1
}


# enable option to create new md5sums
enable_md5sums(){
    MD5SUMS=1
}


# enable quiet option
enable_quiet(){
    QUIET='>/dev/null'
}


# enable reinstall option
enable_reinstall(){
    REINSTALL=1
}

error(){
    echo "$PROGRAM:ERROR: $*" >&2
}


fast(){

    local directory

    for directory in "$@"; do
        build "$directory"
    done
}


# aquire the package destination filename
findpackage(){
    while IFS= read -r string; do
        DESTINATION=$(apt-cache show "$string" | awk -F/ '/^Filename:/ {print $NF}')
        if [[ -n $DESTINATION ]]; then
            FULLPACKAGE=$string
            break
        fi
    done < <("$0" --show --format "$1" 2>/dev/null | awk '{print $NF}')
}


# # aquire the package destination filename
# findpackage(){

#     # NOTE: apt-get will output nothing if package exists in the current
#     #       directory, hence the need to cd out if. This is quite hackish.
#     #       Parsing output of `apt-cache show "$package"` may be a better
#     #       approach.

#     local tempdir=$(mktemp --directory 2>/dev/null)

#     while IFS= read -r string; do
#         DESTINATION=$(cd "$tempdir" && apt-get --print-uris download "$string" 2>/dev/null | awk '{print $2}')
#         if [[ -n $DESTINATION ]]; then
#             FULLPACKAGE=$string
#             break
#         fi
#     done < <("$0" --show --format "$1" 2>/dev/null | awk '{print $NF}')

#     rmdir "$tempdir" &>/dev/null
# }


info(){
    echo "$PROGRAM:INFO: $*"
}


# download a package interactively
interactive(){

    local program

    for program in "$@"; do
        (
            querypackage "$program"

            # skip if necessary
            [[ -z $FULLPACKAGE ]] && return 0

            "$0" --download "$FULLPACKAGE" && return 0 || return 1
        )
    done
}


# make md5sums from scratch
md5sums_helper(){
    (
        ms=DEBIAN/md5sums

        # backups existing md5sums
        mv "$ms" "$ms~" &>/dev/null

        if (( $1 == 1 )); then
            # create new md5sums from scratch
            find -type f ! -path '*/DEBIAN/*' -printf '%P\0' | LC_ALL=C sort -z | xargs -0r -- md5sum > "$ms"
        else
            # remake md5sums using original as a template
            awk '{printf "%s%c", $2, 0}' "$ms~" | xargs -0r md5sum > "$ms"
        fi

        # ensure md5sums is nonzero in size
        if [[ -f $ms && -s $ms ]]; then
            rm "$ms~" &>/dev/null
            chmod 644 "$ms"
            return 0
        fi

        # this point is only reachable upon failure

        # remove empty md5sums if it exists
        if [[ -f $ms ]]; then
            rm "$ms" &>/dev/null
        fi

        # restore from backup
        mv "$ms~" "$ms" &>/dev/null

        return 1
    )
}


# determing package type (archive, installation, neither, or both)
pkgtype(){
    (
        # for a Debian archive file
        dpkg-deb --info -- "$1" &>/dev/null && pkgtype+=('archive')

        # for an installed package
        [[ $(dpkg-query --show --showformat="\${Status}" "$1" 2>/dev/null) = 'install ok installed' ]] && pkgtype+=('installation')

        if (( ${#pkgtype[@]} == 0 )); then
            error "'$1' is not an installed package or valid Debian archive"
            return 1
        elif (( ${#pkgtype[@]} == 1 )); then
            echo "${pkgtype[0]}"
        elif (( ${#pkgtype[@]} == 2 )); then
            warning "'$1' is an installed package and a Debian archive (assuming you intended the Debian archive)"
            echo archive
        fi
    )
}


# prepare directory prior to build
prep_build(){
    (
        # enter directory
        cd "$1" || {
            error "Failed to enter build directory '$1'"
            return 1
        }

        # prepare manpages (verify write access, set perms, compress)
        while IFS= read -rd $'\0' manpage; do
            if [[ ! -w $manpage ]]; then
                error "No write access to '$manpage'"
                return 1
            elif ! chmod 0644 "$manpage"; then
                error "Failed to chmod '$manpage'"
                return 1
            elif ! gzip -9fn "$manpage" ; then
                error "Failed to gzip '$manpage'"
                return 1
            fi
        done < <(find ./usr/share/man/ -type f -name '*.[1-9]' -print0 2>/dev/null)

        ms=DEBIAN/md5sums

        # create md5sums from scratch
        if (( MD5SUMS == 1 )); then
            md5sums_helper 1 || {
                error "Failed to create '$ms'"
                return 1
            }
        # remake md5sums
        else
            # ensure original md5sums exists
            if [[ ! -f $ms ]]; then
                warning "No pre-existing '$ms'"
            # ensure original md5sums is writable
            elif [[ ! -w $ms ]]; then
                warning "No write access to '$ms'"
            # ensure remake of md5sums
            else
                md5sums_helper 0 || {
                    error "Failed to remake '$ms'"
                    return 1
                }
            fi
        fi

        # verify md5sums if it exists
        if [[ -f $ms ]] && ! md5sum --check --status "$ms"; then
            error "'$ms' failed checksum verification"
            return 1
        fi

        # update Installed-Size
        if grep -q '^Installed-Size: [0-9]\+$' DEBIAN/control &>/dev/null; then
            newsize=$(du -k -s --apparent-size . 2>/dev/null | cut -f1)
            if (( newsize > 0 )); then
                sed -i "s/^\(Installed-Size:\) [0-9]\+$/\1 $newsize/" DEBIAN/control || {
                    warning "Failed to update Installed-Size of ${PWD##*/}"
                }
            fi
        fi

    ) || exit 1
}


# query user for package selection
querypackage(){

    declare -A indexed_packages
    local choice destination ordered_packages

    while IFS= read -r string; do
        destination=$(apt-cache show "$string" | awk -F/ '/^Filename:/ {print $NF}')
        if [[ -n $destination ]]; then
            indexed_packages["$string"]=$destination
            ordered_packages+=("$string")
        fi
    done < <("$0" --show --format "$1" 2>/dev/null | awk '{print $NF}')

    (( ${#indexed_packages[@]} == 0 )) && return 1

    echo
    echo "$1"
    echo '----------'

    select choice in "${ordered_packages[@]}" SKIP; do
        if [[ -z $choice ]]; then
            error 'Invalid selection'
            continue
        elif [[ $choice = SKIP ]]; then
            return 0
        fi

        DESTINATION=${indexed_packages["$choice"]}
        FULLPACKAGE=$choice
        return 0
    done
}


# # query user for package selection
# querypackage(){
#     readarray -t packages < <("$0" --show --format "$1" | awk '{print $NF}')

#     (( ${#packages[@]} == 0 )) && return 1

#     echo
#     echo "$1"
#     echo '----------'

#     select choice in "${packages[@]}" SKIP; do
#         if [[ -z $choice ]]; then
#             error 'Invalid selection'
#             continue
#         elif [[ $choice = SKIP ]]; then
#             return 0
#         fi

#         echo "$choice"
#         return 0
#     done
# }


# reinstall package(s)
reinst(){

    local archive

    # reinstall each package within a subshell (no need for local or unset)
    for archive in "$@"; do
        (
            # confirm archive is a file
            if [[ ! -f $archive ]]; then
                error "'$archive' does not appear to be a valid file"
                return 1
            fi

            # lookup package name in archive control file
            package=$(dpkg-deb -f "$archive" package 2>/dev/null)

            # confirm lookup of package name was successful
            if [[ -z $package ]]; then
                error "'$archive' does not appear to be a valid Debian archive"
                return 1
            fi

            # check whether package is already installed
            if [[ $(dpkg-query --show --showformat="\${Status}" "$package" 2>/dev/null) != 'install ok installed' ]]; then
                warning "'$package' was not already installed"
                echo "Consider running 'sudo apt-get install --fix-broken' to resolve missing dependencies" >&2
            fi

            if sudo dpkg --install "$archive" &>/dev/null; then
                echo "dpkg: installed '$package' ($archive)"
                return 0
            else
                echo "dpkg: failed to install '$package' ($archive)" >&2
                return 1
            fi
        )
    done
}


# remove an archive backup (from a temp dir)
remove_backup(){
    if [[ -n $BACKUPFILE ]]; then
        rm "$BACKUPFILE"
        rmdir "$BACKUPDIR"
    fi
}


# create a Debian archive from an installed package
repack(){
    (
        for program in "$@"; do
            if dpkg-repack "$program" &>/dev/null; then
                successes+=("$program")
            else
                failures+=("$program")
            fi
        done

        if (( ${#successes[@]} > 0 )); then
            info "Successfully repacked: ${successes[*]}"
        fi

        if (( ${#failures[@]} > 0 )); then
            error "Failed to repack: ${failures[*]}"
            return 1
        fi
    )
}


# restore an archive backup (from a temp dir)
restore_backup(){
    if [[ -n $BACKUPFILE ]]; then
        mv -T "$BACKUPFILE" "$ARCHIVE"
        if [[ -f $ARCHIVE ]]; then
            info "Restored '$ARCHIVE' from backup"
        else
            warning "Failed to restore '$ARCHIVE' from backup"
        fi
        rmdir "$BACKUPDIR"
    fi
}


# show packages available for download
show(){
    (
        # set the output format string
        if (( FORMAT == 1 )); then
            print_long='printf "apt-get download %s:%s=%s\n", p, a, v'
            print_short='printf "apt-get download %s=%s\n", p, v'
        else
            print_long='print p, v, a'
            print_short='print p, v'
        fi

        set -o pipefail

        for package in "$@"; do

            # parse APT's package cache for the package in question
            apt-cache show "$package" 2>/dev/null | awk "/^Package: /{p=\$2} /^Version: /{v=\$2} /^Architecture/{a=\$2} /^$/{ if (a==\"all\") { $print_short } else { $print_long } }" || {
                error "apt-cache is unable to locate package '$package'"
                false  # ensure exit status accurately reflects result of command
            }

        done
    )
}


# unpack a Debian archive or installed package
unpack(){
    (
        # determine package type (Debian archive or installed) and exit if neither
        pkgtype=$(pkgtype "$1") || return 1

        if [[ $pkgtype = archive ]]; then

            if [[ -n $2 ]]; then
                # set target to supplied argument
                target=$2
            else
                # set target from parsed control file
                target=$(dpkg-deb --field "$1" package version architecture | awk '{print $2}' | paste -sd_)
            fi

            check_unpack_destination "$1" "$target"

            # unpack archive
            dpkg-deb --raw-extract "$1" "$target"

        elif [[ $pkgtype = installation ]]; then

            # perform additional dependency check
            check_dependency unpack_installation

            if [[ -n $2 ]]; then
                # set target to supplied argument
                target=$2
            else
                # set target to program's name
                target=$1
            fi

            check_unpack_destination "$1" "$target"

            # unpack into tmpfolder
            tmpfolder=$(dpkg-repack --generate "$1" 2>/dev/null | awk '{print $(NF-2)}')

            # rename tmpfolder to target
            mv "$tmpfolder" "$target" &>/dev/null
        fi

        # check for target directory and exit now if missing
        if [[ ! -d $target ]]; then
            error "Failed to generate folder '$target' for '$1'"
            return 1
        fi

        info "Successfully unpacked $pkgtype to: $target"

        # prompt to delete archive
        if [[ $pkgtype = archive ]] && (( AUTO != 1 )); then
            read -p "Remove '$1'? " -r
            if [[ ${REPLY,} = y* ]]; then
                rm "$1"
            fi
        fi
    )
}


usage(){
    cat <<-EOF
	Usage: $PROGRAM [OPTIONS] COMMAND ARCHIVE|DIRECTORY|PACKAGE [TARGET]
	Manipulate Debian archives.

	Commands:
	  -b, --build           create a Debian archive from DIR
	  -d, --download        download PKGS(s) via apt-get
	  -i, --interactive     download PKG interactively (select specific version)
	  -r, --reinst          reinstall ARCHIVE(s)
	      --repack          create a Debian archive from installed PKG
	  -s, --show            show PKG(s) available for download
	  -u, --unpack          unpack ARCHIVE or installed PKG into DIR

	Combination Commands:
	  -c, --combo           download and unpack PKG(s) [-adu]
	  -z, --fast            build and reinstall DIR(s) [-abrq]

	Miscellaneous Options:
	  -a, --auto            skip prompts for user input
	  -f, --format          format output of --show for manual download
	  -m, --md5sums         generate new md5sums (default is to rebuild original)
	  -q, --quiet           suppress normal output

	Some commands may be combined. Valid combinations include (but are not limited to) '--auto --download --unpack' (equivalent to --combo), '--auto --build --reinst --quiet' (equivalent to --fast), and '--build --reinst'.

	NOTE: ARCHIVE refers to a '.deb' Debian archive. PKG refers to program available to download or an installed program to unpack.
	EOF
    exit 0
}


version(){
    cat <<-EOF
	$PROGRAM $VERSION

	Copyright (c) 2020 Six (brbsix@gmail.com)
	EOF
    exit 0
}


warning(){
    echo "$PROGRAM:WARNING: $*" >&2
}


PROGRAM=${0##*/}
VERSION='0.2.5'

# clear option flags
unset AUTO FORMAT INTERACTIVE MD5SUMS QUIET REINSTALL

# clear other vars
CMDS=()

shopts='a,b,c,d,f,h,i,m,q,r,s,u,v,z'
lopts='auto,build,combo,download,fast,format,help,interactive,md5sums,quiet,reinst,repack,show,unpack,version'

params=$(getopt -o "$shopts" -l "$lopts" -n "$PROGRAM" -- "$@") || exit 1

eval set -- "$params"

while true; do
    case "$1" in
        -a|--auto)
            enable_auto
            shift
            ;;
        -b|--build)
            CMDS+=('build')
            shift
            ;;
        -c|--combo)
            CMDS+=('combo')
            shift
            ;;
        -d|--download)
            CMDS+=('download')
            shift
            ;;
        -f|--format)
            enable_format
            shift
            ;;
        -h|--help)
            usage
            ;;
        -i|--interactive)
            CMDS+=('interactive')
            shift
            ;;
        -m|--md5sums)
            enable_md5sums
            shift
            ;;
        -q|--quiet)
            enable_quiet
            shift
            ;;
        -r|--reinst)
            CMDS+=('reinst')
            shift
            ;;
        --repack)
            CMDS+=('repack')
            shift
            ;;
        -s|--show)
            CMDS+=('show')
            shift
            ;;
        -u|--unpack)
            CMDS+=('unpack')
            shift
            ;;
        -v|--version)
            version
            ;;
        -z|--fast)
            CMDS+=('fast')
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
done

if (( ${#CMDS[@]} == 0 )); then
    echo "$PROGRAM: missing mandatory option" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
elif (( $# == 0 )); then
    echo "$PROGRAM: missing operand" >&2
    echo "Try '$PROGRAM --help' for more information." >&2
    exit 1
elif commands fast; then
    enable_auto
    enable_quiet
    enable_reinstall
    cmd='fast'
elif commands combo; then
    enable_auto
    cmd='combo'
elif (( ${#CMDS[@]} == 1 )); then
    cmd=${CMDS[0]}
elif commands download interactive; then
    # note that 'download' has no effect when combined with 'interactive'
    # but it is still considered a valid command
    cmd='interactive'
elif commands download unpack; then
    cmd='combo'
elif commands interactive unpack || commands download interactive unpack; then
    # note that 'download' has no effect when combined with 'interactive'
    # and 'unpack' but it is still considered a valid command
    enable_interactive
    cmd='combo'
elif commands build reinst; then
    enable_reinstall
    cmd='build'
else
    error 'Too many commands'
    exit 1
fi

check_dependency "$cmd"

eval -- "$cmd" "$@" "$QUIET"
